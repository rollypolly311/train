#include <iostream>
#include <string>
#include <vector>

// Function to extract values from the string after the first underscore and convert them to a double array
double* extractValues(const std::string& input, size_t& outSize) {
    std::vector<double> values;  // Vector to store the extracted double values

    // Find the position of the first '_'
    size_t start = input.find('_');
    
    // If there's no underscore, return an empty array
    if (start == std::string::npos) {
        outSize = 0;
        return nullptr;
    }

    // Start after the first '_'
    start++;

    // Iterate through the string to find each substring separated by '_'
    size_t pos = start;
    while ((pos = input.find('_', start)) != std::string::npos) {
        std::string token = input.substr(start, pos - start);

        if (token == "NULL") {
            // If token is "NULL", treat it as 0.0
            values.push_back(0.0);
        } else {
            try {
                // Convert token to double and add it to the vector
                values.push_back(std::stod(token));
            } catch (const std::invalid_argument&) {
                // Ignore tokens that can't be converted to double
            }
        }

        // Move to the next token
        start = pos + 1;
    }

    // Convert the vector to a dynamic double array
    outSize = values.size();
    double* array = new double[outSize];
    for (size_t i = 0; i < outSize; ++i) {
        array[i] = values[i];
    }

    return array;
}

int main() {
    std::string str_answ = "8SITE2x4_24.28_25.25_26.26_27.27_NULL_NULL_NULL_NULL_";
    size_t size = 0;  // Variable to store the size of the resulting array

    // Call the function to extract values
    double* extractedValues = extractValues(str_answ, size);

    // Check if the array is not empty
    if (extractedValues != nullptr) {
        // Print the extracted values
        std::cout << "Extracted double values: ";
        for (size_t i = 0; i < size; ++i) {
            std::cout << extractedValues[i] << " ";
        }
        std::cout << std::endl;

        // Cleanup dynamic array memory
        delete[] extractedValues;
    } else {
        std::cout << "No values to extract." << std::endl;
    }

    return 0;
}
